/*
 * Copyright (c) 2020-2021. CodeHead Systems. All rights reserved
 * Ned Wolpert <ned.wolpert@codeheadsystems.com>
 */

apply plugin: "base"
apply plugin: "jvm-test-suite"
apply plugin: "java-library"
apply plugin: "idea"
apply plugin: 'signing'
apply plugin: 'maven-publish'
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

ext {
    appName = "gamelib-net-server"
}

base {
    archivesName = "${appName}"
    version = "${version}"
}

dependencies {
    api libs.gdx

    implementation project(':gamelib-net-common')
    api(libs.commons.io)
    implementation libs.netty.all
    implementation libs.slf4j.api

    implementation(libs.jackson.core)
    implementation(libs.jackson.datatype.jdk8)
    implementation(libs.jackson.annotations)
    implementation(libs.jackson.databind)

    // Immutables
    implementation(libs.immutables.value.annotations)
    annotationProcessor(libs.immutables.value)
    // Dagger
    implementation libs.dagger
    annotationProcessor libs.dagger.compiler

    implementation(libs.logback.classic)
    implementation(libs.logback.core)
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation libs.assertj
                implementation libs.junit.jupiter.engine
                implementation libs.junit.jupiter.api
                implementation libs.junit.jupiter.params
                implementation libs.mockito.junit.jupiter
                implementation libs.mockito.core
                implementation libs.gdx.backend.lwjgl3
                implementation "com.badlogicgames.gdx:gdx-platform:1.12.1:natives-desktop"

                implementation libs.gdx.backend.headless
                implementation libs.commons.io
                implementation libs.slf4j.log4j12
                implementation libs.log4j.api
                implementation libs.log4j.core
                implementation libs.logback.classic
                implementation libs.logback.core
                implementation libs.dagger // Common files for runtime
                annotationProcessor libs.dagger.compiler

                implementation(libs.codehead.test)

            }
        }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = appName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = appName
                description = 'Netty/Server support for game development. Not libGDX specific.'
                url = "https://github.com/wolpert/gamelib"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wolpert'
                        name = 'Ned Wolpert'
                        email = 'ned.wolpert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wolpert/gamelib.git'
                    developerConnection = 'scm:git:ssh://github.com/wolpert/gamelib.git'
                    url = 'https://github.com/wolpert/gamelib/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = "ossrh"
            credentials(PasswordCredentials)
        }
    }
}
signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}